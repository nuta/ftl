//! DO NOT EDIT: This file is auto-generated by ftl_idlc.
#![no_std]

pub use ftl_autogen::*;

pub mod apps {

    pub mod virtio_console {
        pub struct Environ {
            pub autopilot_ch: Option<ftl_api::channel::Channel>,
            pub depends: Depends,
        }

        impl Environ {
            pub fn from_environ_ptr(environ_ptr: *const u8, environ_len: usize) -> Self {
                let environ_bytes =
                    unsafe { ::core::slice::from_raw_parts(environ_ptr, environ_len) };

                #[allow(unused_variables)]
                let environ_json: EnvironJson =
                    serde_json::from_slice(environ_bytes).expect("failed to parse environ JSON");

                let depends = Depends {
                    intc: {
                        use ftl_api::channel::Channel;
                        use ftl_api::handle::OwnedHandle;
                        use ftl_types::handle::HandleId;

                        let handle_id = HandleId::from_raw(environ_json.depends.intc);
                        let handle = OwnedHandle::from_raw(handle_id);
                        Some(Channel::from_handle(handle))
                    },

                    virtio: { environ_json.depends.virtio },
                };

                Self {
                    autopilot_ch: {
                        use ftl_api::channel::Channel;
                        use ftl_api::handle::OwnedHandle;
                        use ftl_types::handle::HandleId;

                        let handle_id = HandleId::from_raw(environ_json.autopilot_ch);
                        let handle = OwnedHandle::from_raw(handle_id);
                        Some(Channel::from_handle(handle))
                    },
                    depends,
                }
            }
        }

        pub struct Depends {
            pub intc: Option<ftl_api::channel::Channel>,
            pub virtio: ftl_api::prelude::Vec<ftl_types::environ::Device>,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct EnvironJson {
            pub autopilot_ch: i32,
            pub depends: DependsJson,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct DependsJson {
            pub intc: i32,
            pub virtio: ftl_api::prelude::Vec<ftl_types::environ::Device>,
        }

        pub enum Message<'a> {
            NewclientRequest(ftl_autogen::protocols::autopilot::NewclientRequestReader<'a>),
            NewclientReply(ftl_autogen::protocols::autopilot::NewclientReplyReader<'a>),
            ListenRequest(ftl_autogen::protocols::intc::ListenRequestReader<'a>),
            ListenReply(ftl_autogen::protocols::intc::ListenReplyReader<'a>),
            PingRequest(ftl_autogen::protocols::ping::PingRequestReader<'a>),
            PingReply(ftl_autogen::protocols::ping::PingReplyReader<'a>),
        }

        impl<'a> ::core::fmt::Debug for Message<'a> {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                match self {
                    Self::NewclientRequest(_) => write!(f, "NewclientRequest"),
                    Self::NewclientReply(_) => write!(f, "NewclientReply"),
                    Self::ListenRequest(_) => write!(f, "ListenRequest"),
                    Self::ListenReply(_) => write!(f, "ListenReply"),
                    Self::PingRequest(_) => write!(f, "PingRequest"),
                    Self::PingReply(_) => write!(f, "PingReply"),
                }
            }
        }

        use ftl_types::message::MessageBuffer;
        use ftl_types::message::MessageDeserialize;
        use ftl_types::message::MessageInfo;
        use ftl_types::message::MessageSerialize;

        impl<'b> MessageDeserialize for Message<'b> {
            type Reader<'a> = Message<'a>;

            fn deserialize<'a>(
                buffer: &'a MessageBuffer,
                msginfo: MessageInfo,
            ) -> Option<Self::Reader<'a>> {
                match msginfo {
                    ftl_autogen::protocols::autopilot::NewclientRequest::MSGINFO => {
                        use ftl_autogen::protocols::autopilot::NewclientRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::NewclientRequest(reader))
                    }

                    ftl_autogen::protocols::autopilot::NewclientReply::MSGINFO => {
                        use ftl_autogen::protocols::autopilot::NewclientReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::NewclientReply(reader))
                    }

                    ftl_autogen::protocols::intc::ListenRequest::MSGINFO => {
                        use ftl_autogen::protocols::intc::ListenRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::ListenRequest(reader))
                    }

                    ftl_autogen::protocols::intc::ListenReply::MSGINFO => {
                        use ftl_autogen::protocols::intc::ListenReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::ListenReply(reader))
                    }

                    ftl_autogen::protocols::ping::PingRequest::MSGINFO => {
                        use ftl_autogen::protocols::ping::PingRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::PingRequest(reader))
                    }

                    ftl_autogen::protocols::ping::PingReply::MSGINFO => {
                        use ftl_autogen::protocols::ping::PingReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::PingReply(reader))
                    }

                    _ => None,
                }
            }
        }
    }

    pub mod arm_gic {
        pub struct Environ {
            pub autopilot_ch: Option<ftl_api::channel::Channel>,
            pub depends: Depends,
        }

        impl Environ {
            pub fn from_environ_ptr(environ_ptr: *const u8, environ_len: usize) -> Self {
                let environ_bytes =
                    unsafe { ::core::slice::from_raw_parts(environ_ptr, environ_len) };

                #[allow(unused_variables)]
                let environ_json: EnvironJson =
                    serde_json::from_slice(environ_bytes).expect("failed to parse environ JSON");

                let depends = Depends {
                    gic: { environ_json.depends.gic },
                };

                Self {
                    autopilot_ch: {
                        use ftl_api::channel::Channel;
                        use ftl_api::handle::OwnedHandle;
                        use ftl_types::handle::HandleId;

                        let handle_id = HandleId::from_raw(environ_json.autopilot_ch);
                        let handle = OwnedHandle::from_raw(handle_id);
                        Some(Channel::from_handle(handle))
                    },
                    depends,
                }
            }
        }

        pub struct Depends {
            pub gic: ftl_api::prelude::Vec<ftl_types::environ::Device>,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct EnvironJson {
            pub autopilot_ch: i32,
            pub depends: DependsJson,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct DependsJson {
            pub gic: ftl_api::prelude::Vec<ftl_types::environ::Device>,
        }

        pub enum Message<'a> {
            NewclientRequest(ftl_autogen::protocols::autopilot::NewclientRequestReader<'a>),
            NewclientReply(ftl_autogen::protocols::autopilot::NewclientReplyReader<'a>),
            ListenRequest(ftl_autogen::protocols::intc::ListenRequestReader<'a>),
            ListenReply(ftl_autogen::protocols::intc::ListenReplyReader<'a>),
            PingRequest(ftl_autogen::protocols::ping::PingRequestReader<'a>),
            PingReply(ftl_autogen::protocols::ping::PingReplyReader<'a>),
        }

        impl<'a> ::core::fmt::Debug for Message<'a> {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                match self {
                    Self::NewclientRequest(_) => write!(f, "NewclientRequest"),
                    Self::NewclientReply(_) => write!(f, "NewclientReply"),
                    Self::ListenRequest(_) => write!(f, "ListenRequest"),
                    Self::ListenReply(_) => write!(f, "ListenReply"),
                    Self::PingRequest(_) => write!(f, "PingRequest"),
                    Self::PingReply(_) => write!(f, "PingReply"),
                }
            }
        }

        use ftl_types::message::MessageBuffer;
        use ftl_types::message::MessageDeserialize;
        use ftl_types::message::MessageInfo;
        use ftl_types::message::MessageSerialize;

        impl<'b> MessageDeserialize for Message<'b> {
            type Reader<'a> = Message<'a>;

            fn deserialize<'a>(
                buffer: &'a MessageBuffer,
                msginfo: MessageInfo,
            ) -> Option<Self::Reader<'a>> {
                match msginfo {
                    ftl_autogen::protocols::autopilot::NewclientRequest::MSGINFO => {
                        use ftl_autogen::protocols::autopilot::NewclientRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::NewclientRequest(reader))
                    }

                    ftl_autogen::protocols::autopilot::NewclientReply::MSGINFO => {
                        use ftl_autogen::protocols::autopilot::NewclientReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::NewclientReply(reader))
                    }

                    ftl_autogen::protocols::intc::ListenRequest::MSGINFO => {
                        use ftl_autogen::protocols::intc::ListenRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::ListenRequest(reader))
                    }

                    ftl_autogen::protocols::intc::ListenReply::MSGINFO => {
                        use ftl_autogen::protocols::intc::ListenReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::ListenReply(reader))
                    }

                    ftl_autogen::protocols::ping::PingRequest::MSGINFO => {
                        use ftl_autogen::protocols::ping::PingRequest as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::PingRequest(reader))
                    }

                    ftl_autogen::protocols::ping::PingReply::MSGINFO => {
                        use ftl_autogen::protocols::ping::PingReply as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::PingReply(reader))
                    }

                    _ => None,
                }
            }
        }
    }
}
