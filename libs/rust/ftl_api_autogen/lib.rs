//! DO NOT EDIT: This file is auto-generated by ftl_idlc.
#![no_std]

pub use ftl_autogen::*;

pub mod apps {
    
    pub mod ping {
        pub struct Environ {
            pub depends: Depends,
        }

        impl Environ {
            pub fn from_environ_ptr(environ_ptr: ftl_types::environ::EnvironPtr) -> Self {
                #[allow(unused_variables)]
                let environ_json: EnvironJson = serde_json::from_slice(environ_ptr.envion_as_bytes())
                    .expect("failed to parse environ JSON");

                let depends = Depends {
                    
                    ping_server: {
                        use ftl_api::channel::Channel;
                        use ftl_api::handle::OwnedHandle;
                        use ftl_types::handle::HandleId;

                        let handle_id = HandleId::from_raw(environ_json.depends.ping_server);
                        let handle = OwnedHandle::from_raw(handle_id);
                        Some(Channel::from_handle(handle))
                    },
                    
                };

                Self {
                    depends,
                }
            }
        }

        pub struct Depends {
            
            pub ping_server: Option<ftl_api::channel::Channel>,
            
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct EnvironJson {
            pub vsyscall: usize,
            pub depends: DependsJson,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct DependsJson {
            
            pub ping_server: i32 /* Handle ID */,
            
        }
    }
    
    pub mod pong {
        pub struct Environ {
            pub depends: Depends,
        }

        impl Environ {
            pub fn from_environ_ptr(environ_ptr: ftl_types::environ::EnvironPtr) -> Self {
                #[allow(unused_variables)]
                let environ_json: EnvironJson = serde_json::from_slice(environ_ptr.envion_as_bytes())
                    .expect("failed to parse environ JSON");

                let depends = Depends {
                    
                };

                Self {
                    depends,
                }
            }
        }

        pub struct Depends {
            
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct EnvironJson {
            pub vsyscall: usize,
            pub depends: DependsJson,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct DependsJson {
            
        }
    }
    
}