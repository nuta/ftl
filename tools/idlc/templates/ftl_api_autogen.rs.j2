//! DO NOT EDIT: This file is auto-generated by ftl_idlc.
#![no_std]

pub use ftl_autogen::*;

pub mod apps {
    {% for app in apps %}
    pub mod {{ app.name }} {
        pub struct Environ {
            pub autopilot_ch: Option<ftl_api::channel::Channel>,
            pub depends: Depends,
        }

        impl Environ {
            pub fn from_environ_ptr(environ_ptr: *const u8, environ_len: usize) -> Self {
                let environ_bytes = unsafe { ::core::slice::from_raw_parts(environ_ptr, environ_len) };

                #[allow(unused_variables)]
                let environ_json: EnvironJson = serde_json::from_slice(environ_bytes)
                    .expect("failed to parse environ JSON");

                let depends = Depends {
                    {% for dep in app.depends %}
                        {{ dep.name }}: {
                            {% if dep.type == "service" %}
                                use ftl_api::channel::Channel;
                                use ftl_api::handle::OwnedHandle;
                                use ftl_types::handle::HandleId;

                                let handle_id = HandleId::from_raw(environ_json.depends.{{ dep.name }});
                                let handle = OwnedHandle::from_raw(handle_id);
                                Some(Channel::from_handle(handle))
                            {% elif dep.type == "device" %}
                                environ_json.depends.{{ dep.name }}
                            {% endif %}
                        },
                    {% endfor %}
                };

                Self {
                    autopilot_ch: {
                        use ftl_api::channel::Channel;
                        use ftl_api::handle::OwnedHandle;
                        use ftl_types::handle::HandleId;

                        let handle_id = HandleId::from_raw(environ_json.autopilot_ch);
                        let handle = OwnedHandle::from_raw(handle_id);
                        Some(Channel::from_handle(handle))
                    },
                    depends,
                }
            }
        }

        pub struct Depends {
            {%- for dep in app.depends %}
                {%- if dep.type == "service" %}
                    pub {{ dep.name }}: Option<ftl_api::channel::Channel>,
                {%- elif dep.type == "device" %}
                    pub {{ dep.name }}: ftl_api::prelude::Vec<ftl_types::environ::Device>,
                {%- endif %}
            {%- endfor %}
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct EnvironJson {
            pub autopilot_ch: i32,
            pub depends: DependsJson,
        }

        #[derive(serde::Serialize, serde::Deserialize)]
        struct DependsJson {
            {%- for dep in app.depends %}
                {%- if dep.type == "service" %}
                    pub {{ dep.name }}: i32,
                {%- elif dep.type == "device" %}
                    pub {{ dep.name }}: ftl_api::prelude::Vec<ftl_types::environ::Device>,
                {%- endif %}
            {%- endfor %}
        }

        pub enum Message<'a> {
            {%- for m in app.used_messages %}
            {{ m.camel_name }}({{ m.ty }}Reader<'a>),
            {%- endfor %}
        }

        use ftl_types::message::MessageSerialize;
        use ftl_types::message::MessageDeserialize;
        use ftl_types::message::MessageInfo;
        use ftl_types::message::MessageBuffer;

        impl<'b> MessageDeserialize for Message<'b> {
            type Reader<'a> = Message<'a>;

            fn deserialize<'a>(
                buffer: &'a MessageBuffer,
                msginfo: MessageInfo
            ) -> Option<Self::Reader<'a>> {
                match msginfo {
                    {% for m in app.used_messages %}
                    {{ m.ty }}::MSGINFO => {
                        use {{ m.ty }} as M;

                        let reader = M::deserialize(buffer, msginfo)?;
                        Some(Message::{{ m.camel_name }}(reader))
                    },
                    {% endfor %}
                    _ => None,
                }
            }
        }
    }
    {% endfor %}
}
