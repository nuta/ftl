use ftl_api::message::MessageBody;
use ftl_api::message::MessageBuffer;
use ftl_api::message::StringField;

pub mod protocols {
    {% for m in messages %}
    #[repr(C)]
    pub struct {{ m.name }} {
        {% for f in m.fields %}
        pub {{ f.name }}: {{ f.ty }},
        {% endfor %}
    }

    impl MessageBody for {{ m.name }} {
        const MSGINFO: MessageInfo = MessageInfo::from_raw({{ m.msginfo }});
        type Reader<'a> = {{ m.name }}Reader<'a>;

        fn deserialize<'a>(buffer: &'a MessageBuffer) -> Self::Reader<'a> {
            {{ m.name }}Reader { buffer }
        }
    }


    pub struct {{ m.name }}Reader<'a> {
        buffer: &'a MessageBuffer,
    }

    impl<'a> {{ m.name }}Reader<'a> {
        fn cast_buffer(buffer: &'a MessageBuffer) -> &'a {{ m.name }} {
            unsafe { &*(buffer as *const _ as *const {{ m.name }}) }
        }

        {% for f in m.fields %}
        pub fn {{ f.name }}(&self) -> {{ f.ty }} {
            let m = self.cast_buffer(self.buffer);
            m.{{ f.name }}
        }
        {% endfor %}
    }
    {% endfor %}
}
